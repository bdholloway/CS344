#!/bin/bash

#####################
## Branden Holloway
## CS344 Program 1
## July 08, 2019
#####################


#Function will print out the dimensions of the matrix fed to it#
dims(){

    ###### Checks Number of arguments ######
    if [ "$#" -ne 1 ] 
        then
            echo "Number of arguments is incorrect" >&2
            exit 1
    fi
    ###### Checks Number of arguments ######

    ######  Readablility Check ######
    if [ ! -f $1 ]
       then
            >&2 echo "File does not exist" 
            exit 1
    elif [ ! -r $1 ]
            then
                >&2 echo "File can not be read"
                exit 1  
    fi
    ######  Readablility Check ######

    #### Gets number of Rows
    NumRow=0
    while read myline
    do
        ((NumRow++))
    done < "$1"

    #### Gets number of Columns
    NumCol=$( head -n 1 $1 | wc -w)
    echo -e "$NumRow $NumCol"           #Sends data to stdout

exit 0

}

#Takes a matrix and reflect it along the main diagnol
transpose(){

    ###### Checks Number of arguments ######
    if [ "$#" -ne 1 ] 
        then
            echo "Number of arguments is incorrect" >&2
            exit 1
    fi
    ###### Checks Number of arguments ######

    ######  Readablility Check ######
    if [ ! -f $1 ]
       then
            >&2 echo "File does not exist" 
            exit 1
    elif [ ! -r $1 ]
            then
                >&2 echo "File can not be read"
                exit 1  
    fi
    ######  Readablility Check ######


	TempCol="TempCol"
	TempTrans="TempTrans"
	cols=0
    #Finds number of Columns in matrix
    read line < $1
    for i in $line
    do
        ((cols++))
    done

	i=1
	while (( "$i" <= "$cols" ))
	do
		
		cut -f "$i" "$1" > "$TempCol"                   #Cuts Column and puts in TempCol
		tr -s '\n' '\t' < "$TempCol" >> "$TempTrans"    #Takes in from TempCol and replaces newline with tab
		truncate -s-1 "$TempTrans"                      #Takes off the extra Tab
		printf "\n" >> "$TempTrans"                     #Tacks on an endline for TempTrans
		((i++))
	done

	cat "$TempTrans"

    ###### Clean Up ######
	rm -f $TempCol
	rm -f $TempTrans
    ###### Clean Up ######

	exit 0
}


 
mean(){

    ###### Checks Number of arguments ######
    if [ "$#" -ne 1 ] 
        then
            echo "Number of arguments is incorrect" >&2
            exit 1
    fi
    ###### Checks Number of arguments ######

    ######  Readablility Check ######
    if [ ! -f $1 ]
       then
            echo "The File does not exist in this scope" >&2
            exit 1
    elif [ ! -r $1 ]
            then
                echo "The File could not be read" >&2
                exit 1  
    fi
    ######  Readablility Check ######

############
    Temp1="tempTrans"
	TempM="TempM"
	cols=$( dims $1 | cut -d ' ' -f 2 )
	
	i=1
	average=0
	num=0
	Remainder=0
	while (( "$i" <= "$cols" ))
	do
		sum=0
		j=0
		#cut the coloumns
		cut -f "$i" "$1" > "$Temp1"
		#read the column into the sum and increment
		while read line
		do
			((j++))
			sum=$((sum+line))
		done <"$Temp1"
        average=$(((sum + (j/2)*( (sum>0)*2-1 )) / j))      #Properly Rounds Average; Formula from instructions        
		printf "%d\t" $average >> "$TempM"          
		((i++))
	done
	
	truncate -s-1 "$TempM"                                  #Takes off the Extra Tab
	printf "\n" >> "$TempM"                                 #Add an endline to TempM
	cat "$TempM"                                            #Sends TempM to stdout

    ###### Clean Up ######
	rm -f $TempM
	rm -f $Temp1
    ###### Clean Up ######
}

#Funtion will add two matrices together 
add(){

    ###### Checks Number of arguments ######
    if [ "$#" -ne 2 ] 
        then
            echo "Number of arguments is incorrect" >&2
            exit 1
    fi
    ###### Checks Number of arguments ######

    ######  Readablility Check ######
    if [ ! -f $1 ]
       then
            echo "The File does not exist in this scope" >&2
            exit 1
    elif [ ! -r $1 ]
            then
                echo "This File can not be read" >&2
                exit 1  
    fi

    if [ ! -f $2 ]
       then
            echo "The File does not exist in this scope" >&2
            exit 1
    elif [ ! -r $2 ]
            then
                echo "This File can not be read" >&2
                exit 1  
    fi
    ######  Readablility Check ######


    ###### Get Number of Rows/Columns ######
    NumRow1=0
    while read myline
    do
        ((NumRow1++))
    done < "$1"
    NumRow2=0
    while read myline
    do
        ((NumRow2++))
    done < "$2"
    NumCol1=$( head -n 1 $1 | wc -w)
    NumCol2=$( head -n 1 $2 | wc -w)
    ###### Get Number of Rows/Columns ######

	###### Matrix Dimension Test ######
    if [[ !($NumRow1 -eq $NumRow2) || !($NumCol1 -eq $NumCol2) ]]
        then    
            echo "Matrix Dimensions are not Compatible" >&2         #Sends to stderr; not stdout
            exit 1
    fi
    ###### Matrix Dimension Test ######

	for ((i=1; i<="$NumRow1"; i++)) # index[1...i] of rows.
	do
        mat1=$(head "-$i" "$1" | tail -1) # Get line at index i from arg 1.
		mat2=$(head "-$i" "$2" | tail -1) # Get line at index i from arg 2.
		for ((j=1; j <="$NumCol1"; j++)) # index[1..j] of columns.
		do
			mat11=$(cut -d'	' -f$j <<< "$mat1") # Cut index j from mat1.
			mat22=$(cut -d'	' -f$j <<< "$mat2") # Cut index j from mat2.
			sum=$(( mat11 + mat22 ))

			if [ $j -eq $NumCol1 ]
			then
				printf "%d\n" $sum                  #adds new line
			else
				printf "%d\t" $sum                  #adds tab
			fi
		done
	done
    exit 0
}

#Function will multiply two matrices together
multiply(){

    ###### Checks Number of arguments ######
    if [ "$#" -ne 2 ] 
        then
            echo "Number of arguments is incorrect" >&2
            exit 1
    fi
    ###### Checks Number of arguments ######

    ######  Readablility Check ######
    if [ ! -f $1 ]
       then
            echo "The File does not exist in this scope" >&2
            exit 1
    elif [ ! -r $1 ]
            then
                echo "The File could not be read" >&2
                exit 1  
    fi
    if [ ! -f $2 ]
       then
            echo "The File does not exist in this scope" >&2
            exit 1
    elif [ ! -r $2 ]
            then
                echo "The File can not be read" >&2
                exit 1  
    fi
    ######  Readablility Check ######


    ###### Array Creation and Filling #######
    declare -A array1; declare -A array2
    rowa=0; rowb=0
    while IFS="$(printf '\t')" read line
    do
        col=0
        for cell in $line
        do
            array1[$rowa, $col]=$cell
            ((col++))
        done
        ((rowa++))
    done < $1
    rows1=$rowa
    cols1=$col

    while IFS="$(printf '\t')" read line
    do
        col=0
        for cell in $line
        do
            array2[$rowb, $col]=$cell
            ((col++))
        done
        ((rowb++))
    done < $2
    rows2=$rowb
    cols2=$col

    ###### Compatibility Test ######
    if [[ !($rows2 -eq $cols1) ]]
        then
            echo "Matrix dimensions are not compatible" >&2
        exit 1
    fi
    ###### Compatibility Test ######

    #####Multipling Operation########
    for i in $(seq 0 $(($rows1 - 1)))    #Loop through rows1 minus 1 times
    do
        FinalOut=
        for j in $(seq 0 $(($cols2 - 1)))    #Loop through cols2 minus 1 times
        do
        sum=0
        for k in $(seq 0 $(($cols1 - 1)))  #Loop through cols1 minus 1 times
        do
            arr1=${array1[$i, $k]}
            arr2=${array2[$k, $j]}
            product=$(( $arr1 * $arr2 ))
            sum=$(( $sum + $product ))
        done
            FinalOut="$FinalOut$sum\t"
        done
            FinalOut=${FinalOut::-2}
            echo -e $FinalOut                         #echos output but -e enables backslash escape
    done

exit 0
}


$@
